import React, { useState, useEffect } from 'react';
import { useCampaign } from '../../../../shared/context/CampaignContext';
import { db } from '../../../../shared/utils/firebase';
import { collection, query, getDocs } from 'firebase/firestore';
import { MenuItem, Select, TextField, Button, Box, Typography } from '@mui/material';

const HeroesTab: React.FC<{ onAddHero: (hero: any) => void }> = ({ onAddHero }) => {
    const { campaign } = useCampaign();
    const [heroes, setHeroes] = useState<any[]>([]);
    const [selectedHeroId, setSelectedHeroId] = useState<string>('');
    const [newHero, setNewHero] = useState<any>({ name: '', ac: '', hp: '', initiative: '' });

    useEffect(() => {
        if (!campaign) return;

        const fetchHeroes = async () => {
            console.log(`üì• Kamp√°ny karaktereinek bet√∂lt√©se: ${campaign}`);
            const charactersRef = collection(db, 'campaigns', campaign, 'characters');

            try {
                const characterDocs = await getDocs(charactersRef);
                const characters = characterDocs.docs.map(doc => ({
                    id: doc.id,
                    ...doc.data()
                }));

                console.log("‚úÖ Karakterek bet√∂ltve:", characters);
                setHeroes(characters);
            } catch (error) {
                console.error("‚ùå Hiba t√∂rt√©nt a karakterek lek√©r√©sekor:", error);
            }
        };

        fetchHeroes();
    }, [campaign]);

    const handleAddHero = () => {
        if (!newHero.initiative) {
            alert("üìå K√©rlek, add meg az initiative √©rt√©ket!");
            return;
        }

        let heroToAdd;

        if (selectedHeroId === 'custom') {
            if (!newHero.name || !newHero.ac || !newHero.hp) {
                alert("üìå K√©rlek, t√∂ltsd ki az √∂sszes mez≈ët az √∫j h≈ësn√©l!");
                return;
            }

            heroToAdd = {
                id: `custom-${Date.now()}`, // Egyedi azonos√≠t√≥ gener√°l√°sa √∫j h≈ësnek
                name: newHero.name,
                ac: Number(newHero.ac),        // üî• Most m√°r mindig sz√°m lesz!
                hp: Number(newHero.hp),        // üî• Most m√°r mindig sz√°m lesz!
                maxHp: Number(newHero.maxHp),  // üî• Most m√°r mindig sz√°m lesz!
                tempHp: Number (newHero.tempHp),
                initiative: parseInt(newHero.initiative, 10)
            };
        } else {
            const selectedHero = heroes.find(hero => hero.id === selectedHeroId);
            if (selectedHero) {
                heroToAdd = {
                    id: selectedHero.id,
                    name: selectedHero.name,
                    ac: Number(selectedHero.ac),        // üî• Most m√°r mindig sz√°m lesz!
                    hp: Number(selectedHero.hp),        // üî• Most m√°r mindig sz√°m lesz!
                    maxHp: Number(selectedHero.maxHp),  // üî• Most m√°r mindig sz√°m lesz!
                    tempHp: Number(selectedHero.tempHp),
                    initiative: parseInt(newHero.initiative, 10)
                };
            }
        }

        if (heroToAdd) {
            console.log("üìù H≈ës hozz√°ad√°sa a harci list√°hoz:", heroToAdd);
            onAddHero(heroToAdd);
        }

        // üìå Mez≈ëk ki√ºr√≠t√©se hozz√°ad√°s ut√°n
        setNewHero({ name: '', ac: '', hp: '', initiative: '' });
        setSelectedHeroId('');
    };

    return (
        <Box sx={{ padding: 2 }}>
            <Typography variant="h6">H≈ës hozz√°ad√°sa</Typography>
            <Select
                fullWidth
                value={selectedHeroId}
                onChange={(e) => {
                    setSelectedHeroId(e.target.value);
                    if (e.target.value !== "custom") {
                        const selectedHero = heroes.find(hero => hero.id === e.target.value);
                        if (selectedHero) {
                            setNewHero({
                                name: selectedHero.name,
                                ac: selectedHero.ac,
                                hp: selectedHero.hp,
                                initiative: ''  // Az initiative-t mindig a j√°t√©kos adja meg!
                            });
                        }
                    } else {
                        setNewHero({ name: '', ac: '', hp: '', initiative: '' });
                    }
                }}
                displayEmpty
                sx={{ marginBottom: 2 }}
            >
                <MenuItem value="" disabled>V√°lassz egy h≈ëst...</MenuItem>
                {heroes.map(hero => (
                    <MenuItem key={hero.id} value={hero.id}>
                        {hero.name} (AC: {hero.ac}, HP: {hero.hp})
                    </MenuItem>
                ))}
                <MenuItem value="custom">‚ûï √öj h≈ës l√©trehoz√°sa</MenuItem>
            </Select>

            {/* Initiative mez≈ë mindig l√°tszik, ha karakter van kiv√°lasztva */}
            {selectedHeroId && (
                <TextField 
                    fullWidth 
                    label="Initiative" 
                    value={newHero.initiative} 
                    onChange={(e) => setNewHero({ ...newHero, initiative: e.target.value })} 
                    sx={{ marginBottom: 2 }} 
                />
            )}

            {/* Csak ha az √∫j karaktert v√°lasztjuk, akkor jelennek meg az extra mez≈ëk */}
            {selectedHeroId === 'custom' && (
                <>
                    <TextField fullWidth label="N√©v" value={newHero.name} onChange={(e) => setNewHero({ ...newHero, name: e.target.value })} sx={{ marginBottom: 2 }} />
                    <TextField fullWidth label="AC" value={newHero.ac} onChange={(e) => setNewHero({ ...newHero, ac: e.target.value })} sx={{ marginBottom: 2 }} />
                    <TextField fullWidth label="HP" value={newHero.hp} onChange={(e) => setNewHero({ ...newHero, hp: e.target.value })} sx={{ marginBottom: 2 }} />
                </>
            )}

            <Button fullWidth variant="contained" onClick={handleAddHero}>H≈ës hozz√°ad√°sa</Button>
        </Box>
    );
};

export default HeroesTab;
